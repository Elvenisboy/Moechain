const expect = require('chai').expect;
const Utils = require('../lib/utils')
let utils = new Utils()
const _ = require('lodash')

let privateKey = Buffer.from('fc12326178a22a1c32381769c4ecc9fbee04aaa94a1a71fee79d0cfc20ef0bf0', 'hex')
let publicKey = Buffer.from('af42053f5a03620fc0c7fbf6baf3c7ff7aceb8dbb418d41b36e86123a77dd97b09f28200a706e1191609295e2ee6475f03d225250d556e466b57b599beeaf319', 'hex')

describe('Utils', () => {
    describe('#generator a privateKey', () => {
        it('should return a 32 bit buffer', () => {
            expect(32).to.equal(utils.generatorPrivateKey().length)
        })
        it('should return a buffer', () => {
            expect(true).to.equal(_.isBuffer(utils.generatorPrivateKey()))
        })
    })

    describe('#generator a publicKey', () => {
        it('should return a 64 bit buffer', () => {
            expect(64).to.equal(utils.generatorPublicKey(utils.generatorPrivateKey()).length);
        })
        it('should return a buffer', () => {
            expect(true).to.equal(_.isBuffer(utils.generatorPublicKey(utils.generatorPrivateKey())))
        })
    })

    describe('#hash', () => {
        it('it will return a long string if use toString', () => {
            expect('4589451aaa78e71e12226d56bfff1db04a74153479f345fb6be1b5ce717b0c41').to.equal(utils.hash('meow meow').toString('hex'))
        })
    })

    describe('#validate', () => {
        it('a good privateKey should return ture', () => {
            expect(true).to.equal(utils.validatePrivateKey(privateKey))
        })
        it('a bad privateKey should return false', () => {
            expect(false).to.equal(utils.validatePrivateKey(Buffer.from('233333333333333333333333333333333333333333333333333333333333333', 'hex')))
        })
        
        it('a good publicKey should return ture', () => {
            expect(true).to.equal(utils.validatePublicKey(publicKey))
        })
        it('a bad publicKey  should return false', () => {
            expect(false).to.equal(utils.validatePrivateKey(Buffer.from('233333333333333333333333333333333333333333333333333333333333333', 'hex')))
        })
    })

    describe('#Address', () => {
        it('the length of address which generated by privateKey is 20', () => {
            expect(20).to.equal(utils.privateToAddress(privateKey).length)
        })
        it('the length of address which generated by publicKey is 20', () => {
            expect(20).to.equal(utils.publicToAddress(publicKey).length)
        })
    })

    describe('#Timestamp', () => {
        it('should be a number', () =>{
            expect(true).to.equal(_.isNumber(utils.timestamp()))
        })
    })
});