/** this is old put Block v1.1
 * exports.putBlock = txs => {
  let blockchain = new Blockchain({ blockDb: blockDb, detailsDb: detailsDb })
  return exports.getHead().then(b => {
    return new Promise((resolve, reject) => {
      let block = new Block()
      block.header.parentHash = b.hash()
      let number =
        b.header.number.toString('hex') === ''
          ? 1
          : new BN(b.header.number).add(new BN('1')).toNumber()
      block.header.number = ethUtil.toBuffer(number)

      let timestamp = Math.floor(Date.now() / 1000).toString(16)
      block.header.timestamp = Buffer.from(timestamp, 'hex')
      block.transactions = txs

      if (!_.isNil(block.transactions)) {
        let getTireHash = async () => {
          let parentStateRoot = b.header.isGenesis()
            ? '0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'
            : b.header.stateRoot
          let stateRoot = await exports.genAccountTrie(
            block.transactions,
            parentStateRoot
          )
          let transactionsTrie = await exports.genTxTrie(block.transactions)
          return { stateRoot, transactionsTrie }
        }

        getTireHash().then(result => {
          const { stateRoot, transactionsTrie } = result
          block.header.transactionsTrie = transactionsTrie
          block.header.stateRoot = stateRoot
          blockchain.putBlock(block, err => {
            if (err) {
              reject(err)
            }
            resolve(block.hash().toString('hex'))
          })
        })
      } else {
        // console.log('交易不存在')
        block.header.stateRoot = b.header.stateRoot
        blockchain.putBlock(block, err => {
          if (err) {
            reject(err)
          }
          resolve(block.hash().toString('hex'))
        })
      }
    })
  })
}
 */
/* //this is old put Block v1.0
exports.putBlock = function(txs) {
  let blockchain = new Blockchain({ blockDb: blockDb, detailsDb: detailsDb })
  return exports.getHead().then(b => {
    return new Promise((resolve, reject) => {
      let block = new Block()
      block.header.parentHash = b.hash()
      let number =
        b.header.number.toString('hex') === ''
          ? 1
          : new BN(b.header.number).add(new BN('1')).toNumber()
      block.header.number = ethUtil.toBuffer(number)

      let timestamp = Math.floor(Date.now() / 1000).toString(16)
      block.header.timestamp = Buffer.from(timestamp, 'hex')
      block.transactions = txs

      if (!_.isNil(block.transactions)) {
        // console.log('交易存在')
        exports.genTxTrie(block.transactions, rootHash => {
          block.header.transactionsTrie = rootHash
          let parentStateRoot = b.header.isGenesis()
            ? '0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'
            : b.header.stateRoot
          exports.genAccountTrie(
            block.transactions,
            parentStateRoot,
            stateRoot => {
              block.header.stateRoot = stateRoot
              blockchain.putBlock(block, err => {
                if (err) {
                  reject(err)
                }
                resolve(block.hash().toString('hex'))
              })
            }
          )
        })
      } else {
        // console.log('交易不存在')
        block.header.stateRoot = b.header.stateRoot
        blockchain.putBlock(block, err => {
          if (err) {
            reject(err)
          }
          resolve(block.hash().toString('hex'))
        })
      }
    })
  })
}
*/